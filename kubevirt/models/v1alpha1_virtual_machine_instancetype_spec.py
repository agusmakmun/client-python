# coding: utf-8

"""
    KubeVirt API

    This is KubeVirt API an add-on for Kubernetes.

    OpenAPI spec version: 1.0.0
    Contact: kubevirt-dev@googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1alpha1VirtualMachineInstancetypeSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'V1alpha1CPUInstancetype',
        'gpus': 'list[V1GPU]',
        'host_devices': 'list[V1HostDevice]',
        'io_threads_policy': 'str',
        'launch_security': 'V1LaunchSecurity',
        'memory': 'V1alpha1MemoryInstancetype'
    }

    attribute_map = {
        'cpu': 'cpu',
        'gpus': 'gpus',
        'host_devices': 'hostDevices',
        'io_threads_policy': 'ioThreadsPolicy',
        'launch_security': 'launchSecurity',
        'memory': 'memory'
    }

    def __init__(self, cpu=None, gpus=None, host_devices=None, io_threads_policy=None, launch_security=None, memory=None):
        """
        V1alpha1VirtualMachineInstancetypeSpec - a model defined in Swagger
        """

        self._cpu = None
        self._gpus = None
        self._host_devices = None
        self._io_threads_policy = None
        self._launch_security = None
        self._memory = None

        self.cpu = cpu
        if gpus is not None:
          self.gpus = gpus
        if host_devices is not None:
          self.host_devices = host_devices
        if io_threads_policy is not None:
          self.io_threads_policy = io_threads_policy
        if launch_security is not None:
          self.launch_security = launch_security
        self.memory = memory

    @property
    def cpu(self):
        """
        Gets the cpu of this V1alpha1VirtualMachineInstancetypeSpec.
        Required CPU related attributes of the instancetype.

        :return: The cpu of this V1alpha1VirtualMachineInstancetypeSpec.
        :rtype: V1alpha1CPUInstancetype
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this V1alpha1VirtualMachineInstancetypeSpec.
        Required CPU related attributes of the instancetype.

        :param cpu: The cpu of this V1alpha1VirtualMachineInstancetypeSpec.
        :type: V1alpha1CPUInstancetype
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")

        self._cpu = cpu

    @property
    def gpus(self):
        """
        Gets the gpus of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines any GPU devices associated with the instancetype.

        :return: The gpus of this V1alpha1VirtualMachineInstancetypeSpec.
        :rtype: list[V1GPU]
        """
        return self._gpus

    @gpus.setter
    def gpus(self, gpus):
        """
        Sets the gpus of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines any GPU devices associated with the instancetype.

        :param gpus: The gpus of this V1alpha1VirtualMachineInstancetypeSpec.
        :type: list[V1GPU]
        """

        self._gpus = gpus

    @property
    def host_devices(self):
        """
        Gets the host_devices of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines any HostDevices associated with the instancetype.

        :return: The host_devices of this V1alpha1VirtualMachineInstancetypeSpec.
        :rtype: list[V1HostDevice]
        """
        return self._host_devices

    @host_devices.setter
    def host_devices(self, host_devices):
        """
        Sets the host_devices of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines any HostDevices associated with the instancetype.

        :param host_devices: The host_devices of this V1alpha1VirtualMachineInstancetypeSpec.
        :type: list[V1HostDevice]
        """

        self._host_devices = host_devices

    @property
    def io_threads_policy(self):
        """
        Gets the io_threads_policy of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines the IOThreadsPolicy to be used by the instancetype.

        :return: The io_threads_policy of this V1alpha1VirtualMachineInstancetypeSpec.
        :rtype: str
        """
        return self._io_threads_policy

    @io_threads_policy.setter
    def io_threads_policy(self, io_threads_policy):
        """
        Sets the io_threads_policy of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines the IOThreadsPolicy to be used by the instancetype.

        :param io_threads_policy: The io_threads_policy of this V1alpha1VirtualMachineInstancetypeSpec.
        :type: str
        """

        self._io_threads_policy = io_threads_policy

    @property
    def launch_security(self):
        """
        Gets the launch_security of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines the LaunchSecurity to be used by the instancetype.

        :return: The launch_security of this V1alpha1VirtualMachineInstancetypeSpec.
        :rtype: V1LaunchSecurity
        """
        return self._launch_security

    @launch_security.setter
    def launch_security(self, launch_security):
        """
        Sets the launch_security of this V1alpha1VirtualMachineInstancetypeSpec.
        Optionally defines the LaunchSecurity to be used by the instancetype.

        :param launch_security: The launch_security of this V1alpha1VirtualMachineInstancetypeSpec.
        :type: V1LaunchSecurity
        """

        self._launch_security = launch_security

    @property
    def memory(self):
        """
        Gets the memory of this V1alpha1VirtualMachineInstancetypeSpec.
        Required Memory related attributes of the instancetype.

        :return: The memory of this V1alpha1VirtualMachineInstancetypeSpec.
        :rtype: V1alpha1MemoryInstancetype
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this V1alpha1VirtualMachineInstancetypeSpec.
        Required Memory related attributes of the instancetype.

        :param memory: The memory of this V1alpha1VirtualMachineInstancetypeSpec.
        :type: V1alpha1MemoryInstancetype
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")

        self._memory = memory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1alpha1VirtualMachineInstancetypeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
